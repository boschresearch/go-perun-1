// Copyright 2022 - See NOTICE file for copyright holders.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: wire.proto

// Package protobuf contains proto buff definitions for wire messages and the
// generated code for marshalling/unmarshalling messages to/from protobuf
// format.

package protobuf

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Envelope
type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender    []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient []byte `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Types that are assignable to Msg:
	//	*Envelope_PingMsg
	//	*Envelope_PongMsg
	//	*Envelope_ShutdownMsg
	//	*Envelope_AuthResponseMsg
	//	*Envelope_LedgerChannelProposalMsg
	//	*Envelope_LedgerChannelProposalAccMsg
	//	*Envelope_SubChannelProposalMsg
	//	*Envelope_SubChannelProposalAccMsg
	//	*Envelope_VirtualChannelProposalMsg
	//	*Envelope_VirtualChannelProposalAccMsg
	//	*Envelope_ChannelProposalRejMsg
	//	*Envelope_ChannelUpdateMsg
	//	*Envelope_VirtualChannelFundingProposalMsg
	//	*Envelope_VirtualChannelSettlementProposalMsg
	//	*Envelope_ChannelUpdateAccMsg
	//	*Envelope_ChannelUpdateRejMsg
	//	*Envelope_ChannelSyncMsg
	Msg isEnvelope_Msg `protobuf_oneof:"msg"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{0}
}

func (x *Envelope) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Envelope) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (m *Envelope) GetMsg() isEnvelope_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *Envelope) GetPingMsg() *PingMsg {
	if x, ok := x.GetMsg().(*Envelope_PingMsg); ok {
		return x.PingMsg
	}
	return nil
}

func (x *Envelope) GetPongMsg() *PongMsg {
	if x, ok := x.GetMsg().(*Envelope_PongMsg); ok {
		return x.PongMsg
	}
	return nil
}

func (x *Envelope) GetShutdownMsg() *ShutdownMsg {
	if x, ok := x.GetMsg().(*Envelope_ShutdownMsg); ok {
		return x.ShutdownMsg
	}
	return nil
}

func (x *Envelope) GetAuthResponseMsg() *AuthResponseMsg {
	if x, ok := x.GetMsg().(*Envelope_AuthResponseMsg); ok {
		return x.AuthResponseMsg
	}
	return nil
}

func (x *Envelope) GetLedgerChannelProposalMsg() *LedgerChannelProposalMsg {
	if x, ok := x.GetMsg().(*Envelope_LedgerChannelProposalMsg); ok {
		return x.LedgerChannelProposalMsg
	}
	return nil
}

func (x *Envelope) GetLedgerChannelProposalAccMsg() *LedgerChannelProposalAccMsg {
	if x, ok := x.GetMsg().(*Envelope_LedgerChannelProposalAccMsg); ok {
		return x.LedgerChannelProposalAccMsg
	}
	return nil
}

func (x *Envelope) GetSubChannelProposalMsg() *SubChannelProposalMsg {
	if x, ok := x.GetMsg().(*Envelope_SubChannelProposalMsg); ok {
		return x.SubChannelProposalMsg
	}
	return nil
}

func (x *Envelope) GetSubChannelProposalAccMsg() *SubChannelProposalAccMsg {
	if x, ok := x.GetMsg().(*Envelope_SubChannelProposalAccMsg); ok {
		return x.SubChannelProposalAccMsg
	}
	return nil
}

func (x *Envelope) GetVirtualChannelProposalMsg() *VirtualChannelProposalMsg {
	if x, ok := x.GetMsg().(*Envelope_VirtualChannelProposalMsg); ok {
		return x.VirtualChannelProposalMsg
	}
	return nil
}

func (x *Envelope) GetVirtualChannelProposalAccMsg() *VirtualChannelProposalAccMsg {
	if x, ok := x.GetMsg().(*Envelope_VirtualChannelProposalAccMsg); ok {
		return x.VirtualChannelProposalAccMsg
	}
	return nil
}

func (x *Envelope) GetChannelProposalRejMsg() *ChannelProposalRejMsg {
	if x, ok := x.GetMsg().(*Envelope_ChannelProposalRejMsg); ok {
		return x.ChannelProposalRejMsg
	}
	return nil
}

func (x *Envelope) GetChannelUpdateMsg() *ChannelUpdateMsg {
	if x, ok := x.GetMsg().(*Envelope_ChannelUpdateMsg); ok {
		return x.ChannelUpdateMsg
	}
	return nil
}

func (x *Envelope) GetVirtualChannelFundingProposalMsg() *VirtualChannelFundingProposalMsg {
	if x, ok := x.GetMsg().(*Envelope_VirtualChannelFundingProposalMsg); ok {
		return x.VirtualChannelFundingProposalMsg
	}
	return nil
}

func (x *Envelope) GetVirtualChannelSettlementProposalMsg() *VirtualChannelSettlementProposalMsg {
	if x, ok := x.GetMsg().(*Envelope_VirtualChannelSettlementProposalMsg); ok {
		return x.VirtualChannelSettlementProposalMsg
	}
	return nil
}

func (x *Envelope) GetChannelUpdateAccMsg() *ChannelUpdateAccMsg {
	if x, ok := x.GetMsg().(*Envelope_ChannelUpdateAccMsg); ok {
		return x.ChannelUpdateAccMsg
	}
	return nil
}

func (x *Envelope) GetChannelUpdateRejMsg() *ChannelUpdateRejMsg {
	if x, ok := x.GetMsg().(*Envelope_ChannelUpdateRejMsg); ok {
		return x.ChannelUpdateRejMsg
	}
	return nil
}

func (x *Envelope) GetChannelSyncMsg() *ChannelSyncMsg {
	if x, ok := x.GetMsg().(*Envelope_ChannelSyncMsg); ok {
		return x.ChannelSyncMsg
	}
	return nil
}

type isEnvelope_Msg interface {
	isEnvelope_Msg()
}

type Envelope_PingMsg struct {
	PingMsg *PingMsg `protobuf:"bytes,3,opt,name=pingMsg,proto3,oneof"`
}

type Envelope_PongMsg struct {
	PongMsg *PongMsg `protobuf:"bytes,4,opt,name=pongMsg,proto3,oneof"`
}

type Envelope_ShutdownMsg struct {
	ShutdownMsg *ShutdownMsg `protobuf:"bytes,5,opt,name=shutdownMsg,proto3,oneof"`
}

type Envelope_AuthResponseMsg struct {
	AuthResponseMsg *AuthResponseMsg `protobuf:"bytes,6,opt,name=authResponseMsg,proto3,oneof"`
}

type Envelope_LedgerChannelProposalMsg struct {
	LedgerChannelProposalMsg *LedgerChannelProposalMsg `protobuf:"bytes,7,opt,name=ledgerChannelProposalMsg,proto3,oneof"`
}

type Envelope_LedgerChannelProposalAccMsg struct {
	LedgerChannelProposalAccMsg *LedgerChannelProposalAccMsg `protobuf:"bytes,8,opt,name=ledgerChannelProposalAccMsg,proto3,oneof"`
}

type Envelope_SubChannelProposalMsg struct {
	SubChannelProposalMsg *SubChannelProposalMsg `protobuf:"bytes,9,opt,name=subChannelProposalMsg,proto3,oneof"`
}

type Envelope_SubChannelProposalAccMsg struct {
	SubChannelProposalAccMsg *SubChannelProposalAccMsg `protobuf:"bytes,10,opt,name=subChannelProposalAccMsg,proto3,oneof"`
}

type Envelope_VirtualChannelProposalMsg struct {
	VirtualChannelProposalMsg *VirtualChannelProposalMsg `protobuf:"bytes,11,opt,name=virtualChannelProposalMsg,proto3,oneof"`
}

type Envelope_VirtualChannelProposalAccMsg struct {
	VirtualChannelProposalAccMsg *VirtualChannelProposalAccMsg `protobuf:"bytes,12,opt,name=virtualChannelProposalAccMsg,proto3,oneof"`
}

type Envelope_ChannelProposalRejMsg struct {
	ChannelProposalRejMsg *ChannelProposalRejMsg `protobuf:"bytes,13,opt,name=channelProposalRejMsg,proto3,oneof"`
}

type Envelope_ChannelUpdateMsg struct {
	ChannelUpdateMsg *ChannelUpdateMsg `protobuf:"bytes,14,opt,name=channelUpdateMsg,proto3,oneof"`
}

type Envelope_VirtualChannelFundingProposalMsg struct {
	VirtualChannelFundingProposalMsg *VirtualChannelFundingProposalMsg `protobuf:"bytes,15,opt,name=virtualChannelFundingProposalMsg,proto3,oneof"`
}

type Envelope_VirtualChannelSettlementProposalMsg struct {
	VirtualChannelSettlementProposalMsg *VirtualChannelSettlementProposalMsg `protobuf:"bytes,16,opt,name=virtualChannelSettlementProposalMsg,proto3,oneof"`
}

type Envelope_ChannelUpdateAccMsg struct {
	ChannelUpdateAccMsg *ChannelUpdateAccMsg `protobuf:"bytes,17,opt,name=channelUpdateAccMsg,proto3,oneof"`
}

type Envelope_ChannelUpdateRejMsg struct {
	ChannelUpdateRejMsg *ChannelUpdateRejMsg `protobuf:"bytes,18,opt,name=channelUpdateRejMsg,proto3,oneof"`
}

type Envelope_ChannelSyncMsg struct {
	ChannelSyncMsg *ChannelSyncMsg `protobuf:"bytes,19,opt,name=channelSyncMsg,proto3,oneof"`
}

func (*Envelope_PingMsg) isEnvelope_Msg() {}

func (*Envelope_PongMsg) isEnvelope_Msg() {}

func (*Envelope_ShutdownMsg) isEnvelope_Msg() {}

func (*Envelope_AuthResponseMsg) isEnvelope_Msg() {}

func (*Envelope_LedgerChannelProposalMsg) isEnvelope_Msg() {}

func (*Envelope_LedgerChannelProposalAccMsg) isEnvelope_Msg() {}

func (*Envelope_SubChannelProposalMsg) isEnvelope_Msg() {}

func (*Envelope_SubChannelProposalAccMsg) isEnvelope_Msg() {}

func (*Envelope_VirtualChannelProposalMsg) isEnvelope_Msg() {}

func (*Envelope_VirtualChannelProposalAccMsg) isEnvelope_Msg() {}

func (*Envelope_ChannelProposalRejMsg) isEnvelope_Msg() {}

func (*Envelope_ChannelUpdateMsg) isEnvelope_Msg() {}

func (*Envelope_VirtualChannelFundingProposalMsg) isEnvelope_Msg() {}

func (*Envelope_VirtualChannelSettlementProposalMsg) isEnvelope_Msg() {}

func (*Envelope_ChannelUpdateAccMsg) isEnvelope_Msg() {}

func (*Envelope_ChannelUpdateRejMsg) isEnvelope_Msg() {}

func (*Envelope_ChannelSyncMsg) isEnvelope_Msg() {}

// Balance represents the balance of single assets for each of the channel
// participants.
type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance [][]byte `protobuf:"bytes,1,rep,name=balance,proto3" json:"balance,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{1}
}

func (x *Balance) GetBalance() [][]byte {
	if x != nil {
		return x.Balance
	}
	return nil
}

// Balances represents the balance of all the assets for each of the channel
// participants.
type Balances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances []*Balance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *Balances) Reset() {
	*x = Balances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances) ProtoMessage() {}

func (x *Balances) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances.ProtoReflect.Descriptor instead.
func (*Balances) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{2}
}

func (x *Balances) GetBalances() []*Balance {
	if x != nil {
		return x.Balances
	}
	return nil
}

type IndexMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexMap []uint32 `protobuf:"varint,1,rep,packed,name=indexMap,proto3" json:"indexMap,omitempty"`
}

func (x *IndexMap) Reset() {
	*x = IndexMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexMap) ProtoMessage() {}

func (x *IndexMap) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexMap.ProtoReflect.Descriptor instead.
func (*IndexMap) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{3}
}

func (x *IndexMap) GetIndexMap() []uint32 {
	if x != nil {
		return x.IndexMap
	}
	return nil
}

type IndexMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexMaps []*IndexMap `protobuf:"bytes,1,rep,name=indexMaps,proto3" json:"indexMaps,omitempty"`
}

func (x *IndexMaps) Reset() {
	*x = IndexMaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexMaps) ProtoMessage() {}

func (x *IndexMaps) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexMaps.ProtoReflect.Descriptor instead.
func (*IndexMaps) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{4}
}

func (x *IndexMaps) GetIndexMaps() []*IndexMap {
	if x != nil {
		return x.IndexMaps
	}
	return nil
}

type SubAlloc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       []byte    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Bals     *Balance  `protobuf:"bytes,2,opt,name=bals,proto3" json:"bals,omitempty"`
	IndexMap *IndexMap `protobuf:"bytes,3,opt,name=indexMap,proto3" json:"indexMap,omitempty"`
}

func (x *SubAlloc) Reset() {
	*x = SubAlloc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubAlloc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubAlloc) ProtoMessage() {}

func (x *SubAlloc) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubAlloc.ProtoReflect.Descriptor instead.
func (*SubAlloc) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{5}
}

func (x *SubAlloc) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubAlloc) GetBals() *Balance {
	if x != nil {
		return x.Bals
	}
	return nil
}

func (x *SubAlloc) GetIndexMap() *IndexMap {
	if x != nil {
		return x.IndexMap
	}
	return nil
}

type Allocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets   [][]byte    `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	Balances *Balances   `protobuf:"bytes,2,opt,name=balances,proto3" json:"balances,omitempty"`
	Locked   []*SubAlloc `protobuf:"bytes,3,rep,name=locked,proto3" json:"locked,omitempty"`
}

func (x *Allocation) Reset() {
	*x = Allocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation) ProtoMessage() {}

func (x *Allocation) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation.ProtoReflect.Descriptor instead.
func (*Allocation) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{6}
}

func (x *Allocation) GetAssets() [][]byte {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Allocation) GetBalances() *Balances {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *Allocation) GetLocked() []*SubAlloc {
	if x != nil {
		return x.Locked
	}
	return nil
}

type BaseChannelProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeDuration uint64      `protobuf:"varint,1,opt,name=challengeDuration,proto3" json:"challengeDuration,omitempty"`
	NonceShare        []byte      `protobuf:"bytes,2,opt,name=nonceShare,proto3" json:"nonceShare,omitempty"`
	App               []byte      `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	InitData          []byte      `protobuf:"bytes,4,opt,name=initData,proto3" json:"initData,omitempty"`
	InitBals          *Allocation `protobuf:"bytes,5,opt,name=InitBals,proto3" json:"InitBals,omitempty"`
	FundingAgreement  *Balances   `protobuf:"bytes,6,opt,name=FundingAgreement,proto3" json:"FundingAgreement,omitempty"`
}

func (x *BaseChannelProposal) Reset() {
	*x = BaseChannelProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseChannelProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseChannelProposal) ProtoMessage() {}

func (x *BaseChannelProposal) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseChannelProposal.ProtoReflect.Descriptor instead.
func (*BaseChannelProposal) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{7}
}

func (x *BaseChannelProposal) GetChallengeDuration() uint64 {
	if x != nil {
		return x.ChallengeDuration
	}
	return 0
}

func (x *BaseChannelProposal) GetNonceShare() []byte {
	if x != nil {
		return x.NonceShare
	}
	return nil
}

func (x *BaseChannelProposal) GetApp() []byte {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *BaseChannelProposal) GetInitData() []byte {
	if x != nil {
		return x.InitData
	}
	return nil
}

func (x *BaseChannelProposal) GetInitBals() *Allocation {
	if x != nil {
		return x.InitBals
	}
	return nil
}

func (x *BaseChannelProposal) GetFundingAgreement() *Balances {
	if x != nil {
		return x.FundingAgreement
	}
	return nil
}

type BaseChannelProposalAcc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalID []byte `protobuf:"bytes,1,opt,name=proposalID,proto3" json:"proposalID,omitempty"`
	NonceShare []byte `protobuf:"bytes,2,opt,name=nonceShare,proto3" json:"nonceShare,omitempty"`
}

func (x *BaseChannelProposalAcc) Reset() {
	*x = BaseChannelProposalAcc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseChannelProposalAcc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseChannelProposalAcc) ProtoMessage() {}

func (x *BaseChannelProposalAcc) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseChannelProposalAcc.ProtoReflect.Descriptor instead.
func (*BaseChannelProposalAcc) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{8}
}

func (x *BaseChannelProposalAcc) GetProposalID() []byte {
	if x != nil {
		return x.ProposalID
	}
	return nil
}

func (x *BaseChannelProposalAcc) GetNonceShare() []byte {
	if x != nil {
		return x.NonceShare
	}
	return nil
}

type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChallengeDuration uint64   `protobuf:"varint,2,opt,name=challengeDuration,proto3" json:"challengeDuration,omitempty"`
	Parts             [][]byte `protobuf:"bytes,3,rep,name=parts,proto3" json:"parts,omitempty"`
	App               []byte   `protobuf:"bytes,4,opt,name=app,proto3" json:"app,omitempty"`
	Nonce             []byte   `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	LedgerChannel     bool     `protobuf:"varint,6,opt,name=ledgerChannel,proto3" json:"ledgerChannel,omitempty"`
	VirtualChannel    bool     `protobuf:"varint,7,opt,name=virtualChannel,proto3" json:"virtualChannel,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{9}
}

func (x *Params) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Params) GetChallengeDuration() uint64 {
	if x != nil {
		return x.ChallengeDuration
	}
	return 0
}

func (x *Params) GetParts() [][]byte {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (x *Params) GetApp() []byte {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *Params) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Params) GetLedgerChannel() bool {
	if x != nil {
		return x.LedgerChannel
	}
	return false
}

func (x *Params) GetVirtualChannel() bool {
	if x != nil {
		return x.VirtualChannel
	}
	return false
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         []byte      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version    uint64      `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	App        []byte      `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	Allocation *Allocation `protobuf:"bytes,4,opt,name=allocation,proto3" json:"allocation,omitempty"`
	Data       []byte      `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	IsFinal    bool        `protobuf:"varint,6,opt,name=IsFinal,proto3" json:"IsFinal,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{10}
}

func (x *State) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *State) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *State) GetApp() []byte {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *State) GetAllocation() *Allocation {
	if x != nil {
		return x.Allocation
	}
	return nil
}

func (x *State) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *State) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *State   `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Sigs  [][]byte `protobuf:"bytes,2,rep,name=sigs,proto3" json:"sigs,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{11}
}

func (x *Transaction) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Transaction) GetSigs() [][]byte {
	if x != nil {
		return x.Sigs
	}
	return nil
}

type SignedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *Params  `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	State  *State   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Sigs   [][]byte `protobuf:"bytes,3,rep,name=sigs,proto3" json:"sigs,omitempty"`
}

func (x *SignedState) Reset() {
	*x = SignedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedState) ProtoMessage() {}

func (x *SignedState) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedState.ProtoReflect.Descriptor instead.
func (*SignedState) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{12}
}

func (x *SignedState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SignedState) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SignedState) GetSigs() [][]byte {
	if x != nil {
		return x.Sigs
	}
	return nil
}

type ChannelUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	ActorIdx uint32 `protobuf:"varint,2,opt,name=ActorIdx,proto3" json:"ActorIdx,omitempty"`
}

func (x *ChannelUpdate) Reset() {
	*x = ChannelUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdate) ProtoMessage() {}

func (x *ChannelUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdate.ProtoReflect.Descriptor instead.
func (*ChannelUpdate) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelUpdate) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ChannelUpdate) GetActorIdx() uint32 {
	if x != nil {
		return x.ActorIdx
	}
	return 0
}

// |  0 | ping type = iota
type PingMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created int64 `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *PingMsg) Reset() {
	*x = PingMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMsg) ProtoMessage() {}

func (x *PingMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMsg.ProtoReflect.Descriptor instead.
func (*PingMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{14}
}

func (x *PingMsg) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

// |  1 | pong
type PongMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created int64 `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *PongMsg) Reset() {
	*x = PongMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PongMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PongMsg) ProtoMessage() {}

func (x *PongMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PongMsg.ProtoReflect.Descriptor instead.
func (*PongMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{15}
}

func (x *PongMsg) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

// |  2 | shutdown
type ShutdownMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ShutdownMsg) Reset() {
	*x = ShutdownMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownMsg) ProtoMessage() {}

func (x *ShutdownMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownMsg.ProtoReflect.Descriptor instead.
func (*ShutdownMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{16}
}

func (x *ShutdownMsg) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// |  3 | authresponse
type AuthResponseMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthResponseMsg) Reset() {
	*x = AuthResponseMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthResponseMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResponseMsg) ProtoMessage() {}

func (x *AuthResponseMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResponseMsg.ProtoReflect.Descriptor instead.
func (*AuthResponseMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{17}
}

// |  4 | ledgerchannelproposal
type LedgerChannelProposalMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseChannelProposal *BaseChannelProposal `protobuf:"bytes,1,opt,name=baseChannelProposal,proto3" json:"baseChannelProposal,omitempty"`
	Participant         []byte               `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	Peers               [][]byte             `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *LedgerChannelProposalMsg) Reset() {
	*x = LedgerChannelProposalMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerChannelProposalMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerChannelProposalMsg) ProtoMessage() {}

func (x *LedgerChannelProposalMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerChannelProposalMsg.ProtoReflect.Descriptor instead.
func (*LedgerChannelProposalMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{18}
}

func (x *LedgerChannelProposalMsg) GetBaseChannelProposal() *BaseChannelProposal {
	if x != nil {
		return x.BaseChannelProposal
	}
	return nil
}

func (x *LedgerChannelProposalMsg) GetParticipant() []byte {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *LedgerChannelProposalMsg) GetPeers() [][]byte {
	if x != nil {
		return x.Peers
	}
	return nil
}

// |  5 | ledgerchannelproposalacc
type LedgerChannelProposalAccMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseChannelProposalAcc *BaseChannelProposalAcc `protobuf:"bytes,1,opt,name=baseChannelProposalAcc,proto3" json:"baseChannelProposalAcc,omitempty"`
	Participant            []byte                  `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *LedgerChannelProposalAccMsg) Reset() {
	*x = LedgerChannelProposalAccMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerChannelProposalAccMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerChannelProposalAccMsg) ProtoMessage() {}

func (x *LedgerChannelProposalAccMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerChannelProposalAccMsg.ProtoReflect.Descriptor instead.
func (*LedgerChannelProposalAccMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{19}
}

func (x *LedgerChannelProposalAccMsg) GetBaseChannelProposalAcc() *BaseChannelProposalAcc {
	if x != nil {
		return x.BaseChannelProposalAcc
	}
	return nil
}

func (x *LedgerChannelProposalAccMsg) GetParticipant() []byte {
	if x != nil {
		return x.Participant
	}
	return nil
}

// |  6 | subchannelproposal
type SubChannelProposalMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseChannelProposal *BaseChannelProposal `protobuf:"bytes,1,opt,name=baseChannelProposal,proto3" json:"baseChannelProposal,omitempty"`
	Parent              []byte               `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *SubChannelProposalMsg) Reset() {
	*x = SubChannelProposalMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubChannelProposalMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubChannelProposalMsg) ProtoMessage() {}

func (x *SubChannelProposalMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubChannelProposalMsg.ProtoReflect.Descriptor instead.
func (*SubChannelProposalMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{20}
}

func (x *SubChannelProposalMsg) GetBaseChannelProposal() *BaseChannelProposal {
	if x != nil {
		return x.BaseChannelProposal
	}
	return nil
}

func (x *SubChannelProposalMsg) GetParent() []byte {
	if x != nil {
		return x.Parent
	}
	return nil
}

// |  7 | subchannelproposalacc
type SubChannelProposalAccMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseChannelProposalAcc *BaseChannelProposalAcc `protobuf:"bytes,1,opt,name=baseChannelProposalAcc,proto3" json:"baseChannelProposalAcc,omitempty"`
}

func (x *SubChannelProposalAccMsg) Reset() {
	*x = SubChannelProposalAccMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubChannelProposalAccMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubChannelProposalAccMsg) ProtoMessage() {}

func (x *SubChannelProposalAccMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubChannelProposalAccMsg.ProtoReflect.Descriptor instead.
func (*SubChannelProposalAccMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{21}
}

func (x *SubChannelProposalAccMsg) GetBaseChannelProposalAcc() *BaseChannelProposalAcc {
	if x != nil {
		return x.BaseChannelProposalAcc
	}
	return nil
}

// |  8 | virtualchannelproposal
type VirtualChannelProposalMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseChannelProposal *BaseChannelProposal `protobuf:"bytes,1,opt,name=baseChannelProposal,proto3" json:"baseChannelProposal,omitempty"`
	Proposer            []byte               `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Peers               [][]byte             `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	Parents             [][]byte             `protobuf:"bytes,4,rep,name=parents,proto3" json:"parents,omitempty"`
	IndexMaps           *IndexMaps           `protobuf:"bytes,5,opt,name=indexMaps,proto3" json:"indexMaps,omitempty"`
}

func (x *VirtualChannelProposalMsg) Reset() {
	*x = VirtualChannelProposalMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualChannelProposalMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualChannelProposalMsg) ProtoMessage() {}

func (x *VirtualChannelProposalMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualChannelProposalMsg.ProtoReflect.Descriptor instead.
func (*VirtualChannelProposalMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{22}
}

func (x *VirtualChannelProposalMsg) GetBaseChannelProposal() *BaseChannelProposal {
	if x != nil {
		return x.BaseChannelProposal
	}
	return nil
}

func (x *VirtualChannelProposalMsg) GetProposer() []byte {
	if x != nil {
		return x.Proposer
	}
	return nil
}

func (x *VirtualChannelProposalMsg) GetPeers() [][]byte {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *VirtualChannelProposalMsg) GetParents() [][]byte {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *VirtualChannelProposalMsg) GetIndexMaps() *IndexMaps {
	if x != nil {
		return x.IndexMaps
	}
	return nil
}

// |  9 | virtualchannelproposalacc
type VirtualChannelProposalAccMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseChannelProposalAcc *BaseChannelProposalAcc `protobuf:"bytes,1,opt,name=baseChannelProposalAcc,proto3" json:"baseChannelProposalAcc,omitempty"`
	Responder              []byte                  `protobuf:"bytes,2,opt,name=responder,proto3" json:"responder,omitempty"`
}

func (x *VirtualChannelProposalAccMsg) Reset() {
	*x = VirtualChannelProposalAccMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualChannelProposalAccMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualChannelProposalAccMsg) ProtoMessage() {}

func (x *VirtualChannelProposalAccMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualChannelProposalAccMsg.ProtoReflect.Descriptor instead.
func (*VirtualChannelProposalAccMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{23}
}

func (x *VirtualChannelProposalAccMsg) GetBaseChannelProposalAcc() *BaseChannelProposalAcc {
	if x != nil {
		return x.BaseChannelProposalAcc
	}
	return nil
}

func (x *VirtualChannelProposalAccMsg) GetResponder() []byte {
	if x != nil {
		return x.Responder
	}
	return nil
}

// | 10 | channelproposalrej
type ChannelProposalRejMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalID []byte `protobuf:"bytes,1,opt,name=proposalID,proto3" json:"proposalID,omitempty"`
	Reason     string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ChannelProposalRejMsg) Reset() {
	*x = ChannelProposalRejMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelProposalRejMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelProposalRejMsg) ProtoMessage() {}

func (x *ChannelProposalRejMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelProposalRejMsg.ProtoReflect.Descriptor instead.
func (*ChannelProposalRejMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{24}
}

func (x *ChannelProposalRejMsg) GetProposalID() []byte {
	if x != nil {
		return x.ProposalID
	}
	return nil
}

func (x *ChannelProposalRejMsg) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// | 11 | channelupdate
type ChannelUpdateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelUpdate *ChannelUpdate `protobuf:"bytes,1,opt,name=channelUpdate,proto3" json:"channelUpdate,omitempty"`
	Sig           []byte         `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *ChannelUpdateMsg) Reset() {
	*x = ChannelUpdateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUpdateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdateMsg) ProtoMessage() {}

func (x *ChannelUpdateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdateMsg.ProtoReflect.Descriptor instead.
func (*ChannelUpdateMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{25}
}

func (x *ChannelUpdateMsg) GetChannelUpdate() *ChannelUpdate {
	if x != nil {
		return x.ChannelUpdate
	}
	return nil
}

func (x *ChannelUpdateMsg) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

// | 12 | virtualchannelfundingproposal
type VirtualChannelFundingProposalMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelUpdateMsg *ChannelUpdateMsg `protobuf:"bytes,1,opt,name=channelUpdateMsg,proto3" json:"channelUpdateMsg,omitempty"`
	Initial          *SignedState      `protobuf:"bytes,2,opt,name=initial,proto3" json:"initial,omitempty"`
	IndexMap         *IndexMap         `protobuf:"bytes,3,opt,name=indexMap,proto3" json:"indexMap,omitempty"`
}

func (x *VirtualChannelFundingProposalMsg) Reset() {
	*x = VirtualChannelFundingProposalMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualChannelFundingProposalMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualChannelFundingProposalMsg) ProtoMessage() {}

func (x *VirtualChannelFundingProposalMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualChannelFundingProposalMsg.ProtoReflect.Descriptor instead.
func (*VirtualChannelFundingProposalMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{26}
}

func (x *VirtualChannelFundingProposalMsg) GetChannelUpdateMsg() *ChannelUpdateMsg {
	if x != nil {
		return x.ChannelUpdateMsg
	}
	return nil
}

func (x *VirtualChannelFundingProposalMsg) GetInitial() *SignedState {
	if x != nil {
		return x.Initial
	}
	return nil
}

func (x *VirtualChannelFundingProposalMsg) GetIndexMap() *IndexMap {
	if x != nil {
		return x.IndexMap
	}
	return nil
}

// | 13 | virtualchannelsettlementproposal
type VirtualChannelSettlementProposalMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelUpdateMsg *ChannelUpdateMsg `protobuf:"bytes,1,opt,name=channelUpdateMsg,proto3" json:"channelUpdateMsg,omitempty"`
	Final            *SignedState      `protobuf:"bytes,2,opt,name=final,proto3" json:"final,omitempty"`
}

func (x *VirtualChannelSettlementProposalMsg) Reset() {
	*x = VirtualChannelSettlementProposalMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualChannelSettlementProposalMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualChannelSettlementProposalMsg) ProtoMessage() {}

func (x *VirtualChannelSettlementProposalMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualChannelSettlementProposalMsg.ProtoReflect.Descriptor instead.
func (*VirtualChannelSettlementProposalMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{27}
}

func (x *VirtualChannelSettlementProposalMsg) GetChannelUpdateMsg() *ChannelUpdateMsg {
	if x != nil {
		return x.ChannelUpdateMsg
	}
	return nil
}

func (x *VirtualChannelSettlementProposalMsg) GetFinal() *SignedState {
	if x != nil {
		return x.Final
	}
	return nil
}

// | 14 | channelupdateacc
type ChannelUpdateAccMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID []byte `protobuf:"bytes,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	Version   uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Sig       []byte `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *ChannelUpdateAccMsg) Reset() {
	*x = ChannelUpdateAccMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUpdateAccMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdateAccMsg) ProtoMessage() {}

func (x *ChannelUpdateAccMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdateAccMsg.ProtoReflect.Descriptor instead.
func (*ChannelUpdateAccMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{28}
}

func (x *ChannelUpdateAccMsg) GetChannelID() []byte {
	if x != nil {
		return x.ChannelID
	}
	return nil
}

func (x *ChannelUpdateAccMsg) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelUpdateAccMsg) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

// | 15 | channelupdaterej
type ChannelUpdateRejMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID []byte `protobuf:"bytes,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	Version   uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Reason    string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ChannelUpdateRejMsg) Reset() {
	*x = ChannelUpdateRejMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUpdateRejMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdateRejMsg) ProtoMessage() {}

func (x *ChannelUpdateRejMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdateRejMsg.ProtoReflect.Descriptor instead.
func (*ChannelUpdateRejMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{29}
}

func (x *ChannelUpdateRejMsg) GetChannelID() []byte {
	if x != nil {
		return x.ChannelID
	}
	return nil
}

func (x *ChannelUpdateRejMsg) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ChannelUpdateRejMsg) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// | 16 | channelsync
type ChannelSyncMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase     uint32       `protobuf:"varint,1,opt,name=phase,proto3" json:"phase,omitempty"`
	CurrentTx *Transaction `protobuf:"bytes,2,opt,name=currentTx,proto3" json:"currentTx,omitempty"`
}

func (x *ChannelSyncMsg) Reset() {
	*x = ChannelSyncMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSyncMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSyncMsg) ProtoMessage() {}

func (x *ChannelSyncMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSyncMsg.ProtoReflect.Descriptor instead.
func (*ChannelSyncMsg) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{30}
}

func (x *ChannelSyncMsg) GetPhase() uint32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *ChannelSyncMsg) GetCurrentTx() *Transaction {
	if x != nil {
		return x.CurrentTx
	}
	return nil
}

var File_wire_proto protoreflect.FileDescriptor

var file_wire_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x8d, 0x0c, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x69, 0x6e,
	0x67, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x6f, 0x6e, 0x67,
	0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x07,
	0x70, 0x6f, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4d,
	0x73, 0x67, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x60, 0x0a, 0x18, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x48,
	0x00, 0x52, 0x18, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x69, 0x0a, 0x1b, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x1b, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x57, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x15, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12,
	0x60, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x75, 0x62,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x18, 0x73, 0x75, 0x62, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x4d, 0x73,
	0x67, 0x12, 0x63, 0x0a, 0x19, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x19, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x6c, 0x0a, 0x1c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x4d, 0x73, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x4d, 0x73, 0x67, 0x12, 0x57, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x6a, 0x4d, 0x73, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x6a, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x6a, 0x4d, 0x73, 0x67, 0x12, 0x48, 0x0a,
	0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x78, 0x0a, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52,
	0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73,
	0x67, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x00,
	0x52, 0x23, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x4d, 0x73,
	0x67, 0x48, 0x00, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6a, 0x4d, 0x73, 0x67, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6a, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6a, 0x4d, 0x73, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x73, 0x67, 0x42,
	0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x23, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x08, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d,
	0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x22, 0x3d,
	0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d,
	0x61, 0x70, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x73, 0x22, 0x71, 0x0a,
	0x08, 0x53, 0x75, 0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x62, 0x61, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x62, 0x61, 0x6c, 0x73,
	0x12, 0x2e, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70,
	0x22, 0x80, 0x01, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x08, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x75, 0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69,
	0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x49, 0x6e, 0x69, 0x74, 0x42,
	0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x49, 0x6e, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x46, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x10, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x16, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x61, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x34,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x22, 0x48, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x73, 0x22, 0x72, 0x0a, 0x0b,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x73,
	0x22, 0x52, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x78, 0x22, 0x23, 0x0a, 0x07, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x23, 0x0a, 0x07, 0x50, 0x6f, 0x6e,
	0x67, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x25,
	0x0a, 0x0b, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x18, 0x4c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x4f, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x52, 0x13, 0x62, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x99,
	0x01, 0x0a, 0x1b, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x58,
	0x0a, 0x16, 0x62, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x52, 0x16, 0x62, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x53,
	0x75, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x4d, 0x73, 0x67, 0x12, 0x4f, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x52, 0x13, 0x62, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x74, 0x0a,
	0x18, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x58, 0x0a, 0x16, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x52, 0x16, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x22, 0xeb, 0x01, 0x0a, 0x19, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73,
	0x67, 0x12, 0x4f, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x13, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31,
	0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70,
	0x73, 0x22, 0x96, 0x01, 0x0a, 0x1c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x4d,
	0x73, 0x67, 0x12, 0x58, 0x0a, 0x16, 0x62, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x52, 0x16, 0x62, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x15, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x6a,
	0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x3d, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67,
	0x22, 0xcb, 0x01, 0x0a, 0x20, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2f, 0x0a,
	0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4d, 0x61, 0x70, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x22, 0x9a,
	0x01, 0x0a, 0x23, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2b,
	0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x5f, 0x0a, 0x13, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x4d,
	0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x22, 0x65, 0x0a, 0x13,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6a,
	0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x78,
	0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wire_proto_rawDescOnce sync.Once
	file_wire_proto_rawDescData = file_wire_proto_rawDesc
)

func file_wire_proto_rawDescGZIP() []byte {
	file_wire_proto_rawDescOnce.Do(func() {
		file_wire_proto_rawDescData = protoimpl.X.CompressGZIP(file_wire_proto_rawDescData)
	})
	return file_wire_proto_rawDescData
}

var file_wire_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_wire_proto_goTypes = []interface{}{
	(*Envelope)(nil),                            // 0: protobuf.Envelope
	(*Balance)(nil),                             // 1: protobuf.Balance
	(*Balances)(nil),                            // 2: protobuf.Balances
	(*IndexMap)(nil),                            // 3: protobuf.IndexMap
	(*IndexMaps)(nil),                           // 4: protobuf.IndexMaps
	(*SubAlloc)(nil),                            // 5: protobuf.SubAlloc
	(*Allocation)(nil),                          // 6: protobuf.Allocation
	(*BaseChannelProposal)(nil),                 // 7: protobuf.BaseChannelProposal
	(*BaseChannelProposalAcc)(nil),              // 8: protobuf.BaseChannelProposalAcc
	(*Params)(nil),                              // 9: protobuf.Params
	(*State)(nil),                               // 10: protobuf.State
	(*Transaction)(nil),                         // 11: protobuf.Transaction
	(*SignedState)(nil),                         // 12: protobuf.SignedState
	(*ChannelUpdate)(nil),                       // 13: protobuf.ChannelUpdate
	(*PingMsg)(nil),                             // 14: protobuf.PingMsg
	(*PongMsg)(nil),                             // 15: protobuf.PongMsg
	(*ShutdownMsg)(nil),                         // 16: protobuf.ShutdownMsg
	(*AuthResponseMsg)(nil),                     // 17: protobuf.AuthResponseMsg
	(*LedgerChannelProposalMsg)(nil),            // 18: protobuf.LedgerChannelProposalMsg
	(*LedgerChannelProposalAccMsg)(nil),         // 19: protobuf.LedgerChannelProposalAccMsg
	(*SubChannelProposalMsg)(nil),               // 20: protobuf.SubChannelProposalMsg
	(*SubChannelProposalAccMsg)(nil),            // 21: protobuf.SubChannelProposalAccMsg
	(*VirtualChannelProposalMsg)(nil),           // 22: protobuf.VirtualChannelProposalMsg
	(*VirtualChannelProposalAccMsg)(nil),        // 23: protobuf.VirtualChannelProposalAccMsg
	(*ChannelProposalRejMsg)(nil),               // 24: protobuf.ChannelProposalRejMsg
	(*ChannelUpdateMsg)(nil),                    // 25: protobuf.ChannelUpdateMsg
	(*VirtualChannelFundingProposalMsg)(nil),    // 26: protobuf.VirtualChannelFundingProposalMsg
	(*VirtualChannelSettlementProposalMsg)(nil), // 27: protobuf.VirtualChannelSettlementProposalMsg
	(*ChannelUpdateAccMsg)(nil),                 // 28: protobuf.ChannelUpdateAccMsg
	(*ChannelUpdateRejMsg)(nil),                 // 29: protobuf.ChannelUpdateRejMsg
	(*ChannelSyncMsg)(nil),                      // 30: protobuf.ChannelSyncMsg
}
var file_wire_proto_depIdxs = []int32{
	14, // 0: protobuf.Envelope.pingMsg:type_name -> protobuf.PingMsg
	15, // 1: protobuf.Envelope.pongMsg:type_name -> protobuf.PongMsg
	16, // 2: protobuf.Envelope.shutdownMsg:type_name -> protobuf.ShutdownMsg
	17, // 3: protobuf.Envelope.authResponseMsg:type_name -> protobuf.AuthResponseMsg
	18, // 4: protobuf.Envelope.ledgerChannelProposalMsg:type_name -> protobuf.LedgerChannelProposalMsg
	19, // 5: protobuf.Envelope.ledgerChannelProposalAccMsg:type_name -> protobuf.LedgerChannelProposalAccMsg
	20, // 6: protobuf.Envelope.subChannelProposalMsg:type_name -> protobuf.SubChannelProposalMsg
	21, // 7: protobuf.Envelope.subChannelProposalAccMsg:type_name -> protobuf.SubChannelProposalAccMsg
	22, // 8: protobuf.Envelope.virtualChannelProposalMsg:type_name -> protobuf.VirtualChannelProposalMsg
	23, // 9: protobuf.Envelope.virtualChannelProposalAccMsg:type_name -> protobuf.VirtualChannelProposalAccMsg
	24, // 10: protobuf.Envelope.channelProposalRejMsg:type_name -> protobuf.ChannelProposalRejMsg
	25, // 11: protobuf.Envelope.channelUpdateMsg:type_name -> protobuf.ChannelUpdateMsg
	26, // 12: protobuf.Envelope.virtualChannelFundingProposalMsg:type_name -> protobuf.VirtualChannelFundingProposalMsg
	27, // 13: protobuf.Envelope.virtualChannelSettlementProposalMsg:type_name -> protobuf.VirtualChannelSettlementProposalMsg
	28, // 14: protobuf.Envelope.channelUpdateAccMsg:type_name -> protobuf.ChannelUpdateAccMsg
	29, // 15: protobuf.Envelope.channelUpdateRejMsg:type_name -> protobuf.ChannelUpdateRejMsg
	30, // 16: protobuf.Envelope.channelSyncMsg:type_name -> protobuf.ChannelSyncMsg
	1,  // 17: protobuf.Balances.balances:type_name -> protobuf.Balance
	3,  // 18: protobuf.IndexMaps.indexMaps:type_name -> protobuf.IndexMap
	1,  // 19: protobuf.SubAlloc.bals:type_name -> protobuf.Balance
	3,  // 20: protobuf.SubAlloc.indexMap:type_name -> protobuf.IndexMap
	2,  // 21: protobuf.Allocation.balances:type_name -> protobuf.Balances
	5,  // 22: protobuf.Allocation.locked:type_name -> protobuf.SubAlloc
	6,  // 23: protobuf.BaseChannelProposal.InitBals:type_name -> protobuf.Allocation
	2,  // 24: protobuf.BaseChannelProposal.FundingAgreement:type_name -> protobuf.Balances
	6,  // 25: protobuf.State.allocation:type_name -> protobuf.Allocation
	10, // 26: protobuf.Transaction.state:type_name -> protobuf.State
	9,  // 27: protobuf.SignedState.params:type_name -> protobuf.Params
	10, // 28: protobuf.SignedState.state:type_name -> protobuf.State
	10, // 29: protobuf.ChannelUpdate.state:type_name -> protobuf.State
	7,  // 30: protobuf.LedgerChannelProposalMsg.baseChannelProposal:type_name -> protobuf.BaseChannelProposal
	8,  // 31: protobuf.LedgerChannelProposalAccMsg.baseChannelProposalAcc:type_name -> protobuf.BaseChannelProposalAcc
	7,  // 32: protobuf.SubChannelProposalMsg.baseChannelProposal:type_name -> protobuf.BaseChannelProposal
	8,  // 33: protobuf.SubChannelProposalAccMsg.baseChannelProposalAcc:type_name -> protobuf.BaseChannelProposalAcc
	7,  // 34: protobuf.VirtualChannelProposalMsg.baseChannelProposal:type_name -> protobuf.BaseChannelProposal
	4,  // 35: protobuf.VirtualChannelProposalMsg.indexMaps:type_name -> protobuf.IndexMaps
	8,  // 36: protobuf.VirtualChannelProposalAccMsg.baseChannelProposalAcc:type_name -> protobuf.BaseChannelProposalAcc
	13, // 37: protobuf.ChannelUpdateMsg.channelUpdate:type_name -> protobuf.ChannelUpdate
	25, // 38: protobuf.VirtualChannelFundingProposalMsg.channelUpdateMsg:type_name -> protobuf.ChannelUpdateMsg
	12, // 39: protobuf.VirtualChannelFundingProposalMsg.initial:type_name -> protobuf.SignedState
	3,  // 40: protobuf.VirtualChannelFundingProposalMsg.indexMap:type_name -> protobuf.IndexMap
	25, // 41: protobuf.VirtualChannelSettlementProposalMsg.channelUpdateMsg:type_name -> protobuf.ChannelUpdateMsg
	12, // 42: protobuf.VirtualChannelSettlementProposalMsg.final:type_name -> protobuf.SignedState
	11, // 43: protobuf.ChannelSyncMsg.currentTx:type_name -> protobuf.Transaction
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_wire_proto_init() }
func file_wire_proto_init() {
	if File_wire_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wire_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexMaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubAlloc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Allocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseChannelProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseChannelProposalAcc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PongMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthResponseMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerChannelProposalMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerChannelProposalAccMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubChannelProposalMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubChannelProposalAccMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualChannelProposalMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualChannelProposalAccMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelProposalRejMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUpdateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualChannelFundingProposalMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualChannelSettlementProposalMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUpdateAccMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUpdateRejMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelSyncMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wire_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Envelope_PingMsg)(nil),
		(*Envelope_PongMsg)(nil),
		(*Envelope_ShutdownMsg)(nil),
		(*Envelope_AuthResponseMsg)(nil),
		(*Envelope_LedgerChannelProposalMsg)(nil),
		(*Envelope_LedgerChannelProposalAccMsg)(nil),
		(*Envelope_SubChannelProposalMsg)(nil),
		(*Envelope_SubChannelProposalAccMsg)(nil),
		(*Envelope_VirtualChannelProposalMsg)(nil),
		(*Envelope_VirtualChannelProposalAccMsg)(nil),
		(*Envelope_ChannelProposalRejMsg)(nil),
		(*Envelope_ChannelUpdateMsg)(nil),
		(*Envelope_VirtualChannelFundingProposalMsg)(nil),
		(*Envelope_VirtualChannelSettlementProposalMsg)(nil),
		(*Envelope_ChannelUpdateAccMsg)(nil),
		(*Envelope_ChannelUpdateRejMsg)(nil),
		(*Envelope_ChannelSyncMsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wire_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wire_proto_goTypes,
		DependencyIndexes: file_wire_proto_depIdxs,
		MessageInfos:      file_wire_proto_msgTypes,
	}.Build()
	File_wire_proto = out.File
	file_wire_proto_rawDesc = nil
	file_wire_proto_goTypes = nil
	file_wire_proto_depIdxs = nil
}
