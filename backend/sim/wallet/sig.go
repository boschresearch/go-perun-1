// Copyright 2019 - See NOTICE file for copyright holders.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package wallet

import (
	"crypto/ecdsa"
	"crypto/sha256"
	"fmt"
	"math/big"

	"github.com/pkg/errors"
	"perun.network/go-perun/wallet"
)

var (
	pointSize = curve.Params().BitSize / bitsPerByte

	// sigLen is the length of a signature in bytes.
	sigLen = (curve.Params().BitSize / bitsPerByte) * pointsPerSig
)

// Sig represents the signature generated by the sim wallet.
type Sig struct {
	r, s *big.Int
}

// MarshalBinary marshals the signature into its binary representation. Error
// will always be nil, it is for implementing BinaryMarshaler.
func (sig Sig) MarshalBinary() ([]byte, error) {
	pointSize := curve.Params().BitSize / bitsPerByte
	rBytes := append(make([]byte, pointSize-len(sig.r.Bytes())), sig.r.Bytes()...)
	sBytes := append(make([]byte, pointSize-len(sig.s.Bytes())), sig.s.Bytes()...)
	return append(rBytes, sBytes...), nil
}

// UnmarshalBinary unmarshals the signature from its binary representation.
func (sig *Sig) UnmarshalBinary(data []byte) (err error) {
	if len(data) != sigLen {
		return fmt.Errorf("unexpected signature length %d, want %d", len(data), sigLen) //nolint: goerr113
	}

	rBytes := data[0:pointSize]
	sBytes := data[pointSize:sigLen]
	sig.r = new(big.Int).SetBytes(rBytes)
	sig.s = new(big.Int).SetBytes(sBytes)

	return nil
}

// Verify verifies if the signature on the given message was made by the given
// address.
func (sig Sig) Verify(msg []byte, addr wallet.Address) (bool, error) {
	ethAddr, ok := addr.(*Address)
	if !ok {
		return false, errors.New("Wrong address type passed to Backend.VerifySignature")
	}

	// escda.Verify needs a digest as input
	// ref https://golang.org/pkg/crypto/ecdsa/#Verify
	return ecdsa.Verify((*ecdsa.PublicKey)(ethAddr), digest(msg), sig.r, sig.s), nil
}

func digest(msg []byte) []byte {
	digest := sha256.Sum256(msg)
	return digest[:]
}

// Clone returns a deep copy of the signature.
func (sig Sig) Clone() wallet.Sig {
	clone := Sig{
		r: new(big.Int).Set(sig.r),
		s: new(big.Int).Set(sig.s),
	}
	return &clone
}
