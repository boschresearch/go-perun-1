// Copyright 2021 - See NOTICE file for copyright holders.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	channel "perun.network/go-perun/channel"

	mock "github.com/stretchr/testify/mock"
)

// RegisterSubscriber is an autogenerated mock type for the RegisterSubscriber type
type RegisterSubscriber struct {
	mock.Mock
}

// Register provides a mock function with given fields: _a0, _a1, _a2
func (_m *RegisterSubscriber) Register(_a0 context.Context, _a1 channel.AdjudicatorReq, _a2 []channel.SignedState) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, channel.AdjudicatorReq, []channel.SignedState) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *RegisterSubscriber) Subscribe(_a0 context.Context, _a1 [32]byte) (channel.AdjudicatorSubscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 channel.AdjudicatorSubscription
	if rf, ok := ret.Get(0).(func(context.Context, [32]byte) channel.AdjudicatorSubscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(channel.AdjudicatorSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, [32]byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
