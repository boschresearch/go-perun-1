// Copyright 2021 - See NOTICE file for copyright holders.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	channel "perun.network/go-perun/channel"
)

// AdjudicatorSubscription is an autogenerated mock type for the AdjudicatorSubscription type
type AdjudicatorSubscription struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *AdjudicatorSubscription) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Err provides a mock function with given fields:
func (_m *AdjudicatorSubscription) Err() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Next provides a mock function with given fields:
func (_m *AdjudicatorSubscription) Next() channel.AdjudicatorEvent {
	ret := _m.Called()

	var r0 channel.AdjudicatorEvent
	if rf, ok := ret.Get(0).(func() channel.AdjudicatorEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(channel.AdjudicatorEvent)
		}
	}

	return r0
}
